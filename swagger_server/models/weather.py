# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Weather(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, temp: int=None, forecast: str=None, advice: str=None):
        """
        Weather - a model defined in Swagger

        :param temp: The temp of this Weather.
        :type temp: int
        :param forecast: The forecast of this Weather.
        :type forecast: str
        :param advice: The advice of this Weather.
        :type advice: str
        """
        self.swagger_types = {
            'temp': int,
            'forecast': str,
            'advice': str
        }

        self.attribute_map = {
            'temp': 'temp',
            'forecast': 'forecast',
            'advice': 'advice'
        }

        self._temp = temp
        self._forecast = forecast
        self._advice = advice

    @classmethod
    def from_dict(cls, dikt) -> 'Weather':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Weather of this Weather.
        :rtype: Weather
        """
        return deserialize_model(dikt, cls)

    @property
    def temp(self) -> int:
        """
        Gets the temp of this Weather.

        :return: The temp of this Weather.
        :rtype: int
        """
        return self._temp

    @temp.setter
    def temp(self, temp: int):
        """
        Sets the temp of this Weather.

        :param temp: The temp of this Weather.
        :type temp: int
        """

        self._temp = temp

    @property
    def forecast(self) -> str:
        """
        Gets the forecast of this Weather.

        :return: The forecast of this Weather.
        :rtype: str
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast: str):
        """
        Sets the forecast of this Weather.

        :param forecast: The forecast of this Weather.
        :type forecast: str
        """

        self._forecast = forecast

    @property
    def advice(self) -> str:
        """
        Gets the advice of this Weather.

        :return: The advice of this Weather.
        :rtype: str
        """
        return self._advice

    @advice.setter
    def advice(self, advice: str):
        """
        Sets the advice of this Weather.

        :param advice: The advice of this Weather.
        :type advice: str
        """

        self._advice = advice

